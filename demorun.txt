EXAMPLE SHELL SESSION TO RETRIEVE A TICKET AND ENCTICKETPART
============================================================

This is not a fullblown demonstration of kerberos2nfc yet; it does however
show that the desired information can be extracted from Kerberos.  The
necessary encryption has not been applied yet, nor the actual packaging
in NDEF format; these are relatively simple actions.

Note that the format of the generated information is nice, and as it ought
to be under RFC4120.  That's a big concern out of the way.  Indeed, fetching
a ticket to a service (or defaulting to the TGT) and producing its key
material is quite possible.

Don't think this is crackable though... by the time you read this, the
temporary session key shown in the plain has already evaporated.  This is
precisely the point of using Kerberos with NFC Tags, that it does not
need the same level of scrutiny as a credential with an infinite life;
the fixed nature of NFC Tags suddenly becomes endurable.  Of course we
will in the end add encryption as well, because radio beacons should
not be beaconing out unprotected secrets to anyone.

    shell$ cat /dev/urandom | hexdump | head | sha256sum | cut -c 1-64
    
    7c5ad561cd4de6b14ba48d547d5c85a49eded66e4d840806f306970ef7a8c9ee

Let this be your key.  Now setup a keytab holding it:

    shell$ rm -f test.keytab
    
    shell$ ktutil
    
    ktutil: clear
    
    ktutil: addent -key -p 3123456789@TEL -k 1 -e aes256-cts-hmac-sha1-96
    
    Key for 3123456789@TEL (hex):
    
    ktutil: list
    
    slot KVNO Principal
    ---- ---- ---------------------------------------------------------------------
       1    1                           3123456789@TEL
    
    ktutil: wkt test.keytab
    
    ktutil: quit

Proceed to login to Kerberos,

    shell$ kinit rick@ARPA2.NET  # or add "-l 15m"
    
    Password for rick@ARPA2.NET: 
    
    shell$ klist 
    Ticket cache: FILE:/tmp/krb5cc_0
    Default principal: rick@ARPA2.NET
    
    Valid starting     Expires            Service principal
    17/09/16 12:16:49  17/09/16 22:16:49  krbtgt/ARPA2.NET@ARPA2.NET
            renew until 18/09/16 12:16:47
    17/09/16 12:16:53  17/09/16 22:16:49  xmpp/xmpp.arpa2.net@ARPA2.NET
            renew until 18/09/16 12:16:47

Then it is time to export the Ticket data:

    shell$ ./ticket2ndef xmpp/xmpp.arpa2.net@ARPA2.NET
    
    -----BEGIN CLIENT PRINCIPAL-----
    NameType: 1
    Name_0: rick
    Realm: ARPA2.NET
    -----END CLIENT PRINCIPAL-----
    
    -----BEGIN SERVICE PRINCIPAL-----
    NameType: 1
    Name_0: xmpp
    Name_1: xmpp.arpa2.net
    Realm: ARPA2.NET
    -----END SERVICE PRINCIPAL-----
    
    -----BEGIN TICKET HEXDUMP-----
    61 82 01 61 30 82 01 5d a0 03 02 01 05 a1 0b 1b
    09 41 52 50 41 32 2e 4e 45 54 a2 21 30 1f a0 03
    02 01 01 a1 18 30 16 1b 04 78 6d 70 70 1b 0e 78
    6d 70 70 2e 61 72 70 61 32 2e 6e 65 74 a3 82 01
    24 30 82 01 20 a0 03 02 01 12 a1 03 02 01 03 a2
    82 01 12 04 82 01 0e 30 29 4c 30 d0 35 66 bf e9
    5c 90 45 86 54 5d c5 b3 c9 8b f1 52 db 36 92 fc
    b1 6f a5 51 01 c8 78 26 a8 12 12 44 38 00 da 75
    18 ba 50 14 89 4b 79 bd 71 ac 12 3b 76 17 10 f6
    11 57 05 b5 84 94 86 62 55 ce 8d f0 10 f4 91 7c
    6c 57 ed d2 00 3f 32 e6 17 4d f1 5a 8e c5 f9 ef
    77 5e 02 d4 6d ee 78 85 cf ad f3 31 03 98 89 86
    c2 0c cb 7d 02 8f 55 08 3c 16 e2 e9 69 86 bc af
    fe 39 08 05 94 4f 42 e0 22 57 66 81 ed c0 5c d6
    46 1d eb ff a0 79 a8 3d 98 ba a7 48 80 6e 1c f5
    a5 fb 2f 44 8b 4d e2 f1 de 9c ce ea 59 4e 3a d0
    70 df 79 71 e0 db 24 cd 24 d7 46 c7 d4 28 10 9e
    ea e2 6c ad 4b 33 b9 ad 51 3b b2 01 47 83 2d 74
    36 2b 4d a4 f9 5d e6 e3 60 3d ca a4 9b 87 43 a4
    46 82 99 71 c4 64 07 c4 88 d7 a2 86 ef 3a 83 36
    54 e8 97 21 cf 32 3f 7f 97 8f 3d a3 00 6b b8 c7
    b6 fc 7e 2e 35 dc c4 c5 ae ee 53 7d a0 14 d3 65
    6d 9c 83 1c af
    -----END TICKET HEXDUMP-----
    
    -----BEGIN KEYDATA HEXDUMP-----
    63 81 d3 30 81 d0 a0 04 03 02 00 00 a1 2b 30 29
    a0 03 02 01 12 a1 22 04 20 a6 d3 2b b5 f9 7e db
    70 42 ef 20 3d eb af f7 1e 22 21 81 45 f5 ca 38
    53 40 db d0 f2 01 b1 da e8 a2 0b 1b 09 41 52 50
    41 32 2e 4e 45 54 a3 11 30 0f a0 03 02 01 01 a1
    08 30 06 1b 04 72 69 63 6b a4 0b 30 09 a0 03 02
    01 ff a1 02 04 00 a5 1a 18 18 53 61 74 20 53 65
    70 20 31 37 20 31 32 3a 31 36 3a 34 39 20 32 30
    31 36 a6 1a 18 18 53 61 74 20 53 65 70 20 31 37
    20 31 32 3a 31 36 3a 35 33 20 32 30 31 36 a7 1a
    18 18 53 61 74 20 53 65 70 20 31 37 20 32 32 3a
    31 36 3a 34 39 20 32 30 31 36 a8 1a 18 18 53 75
    6e 20 53 65 70 20 31 38 20 31 32 3a 31 36 3a 34
    37 20 32 30 31 36
    -----END KEYDATA HEXDUMP-----
    
    Lengths: plaintext 214, encrypted 262, diff 48
    
    -----BEGIN ENCRYPTED KEYDATA HEXDUMP-----
    30 82 01 02 a0 03 02 01 12 a1 03 02 01 02 a2 81
    f5 04 81 f2 5a 4e af 7f 06 c6 31 91 db 9b 68 88
    85 fe 0c e8 60 92 b7 8b 86 85 37 73 81 33 65 cc
    37 b2 4a ff 28 bb 65 9f d2 49 f3 f2 1e d6 45 15
    a4 b5 cd 1b b1 c9 11 42 ee b3 c9 e3 88 04 5f a3
    b6 a6 8b 33 5e 39 19 4d 18 48 36 1e b8 71 30 52
    8b 02 2c dc 41 d7 b1 95 1f c6 24 f3 47 e9 92 fd
    dd a6 d9 d1 08 1a c1 aa 26 1a 01 62 aa 66 8d 03
    57 fa 84 8d 88 a4 e1 0a 94 3a 37 f4 a2 7b 96 90
    04 df 89 1a ef 42 bb fb 60 7f d4 75 8c 88 16 8d
    10 42 aa 32 53 1e 1e 24 50 fe 53 d8 63 3a 98 92
    a0 f8 48 ea b4 39 33 70 59 b1 e7 0b 79 ae d6 3b
    5d a2 3c d9 73 58 0c ca c0 55 86 5d 05 96 4f dd
    e8 6f 4c eb 5f a9 54 15 eb da e2 28 e3 fa 27 b7
    ee b3 d4 b2 7e f7 b0 7c b9 1f 1c af 2e 24 ae c3
    d2 c4 3c 74 58 64 60 7b 54 3a 61 50 24 cb 9a 4f
    ee 2c aa 15 48 7e
    -----END ENCRYPTED KEYDATA HEXDUMP-----

You can pickup the `KEYDATA` to see its contents (including a key!) with

    shell$ hexin > /tmp/keydata.der
    
    00000000> 63 81 d3 30 81 d0 a0 04 03 02 00 00 a1 2b 30 29
    00000010> a0 03 02 01 12 a1 22 04 20 a6 d3 2b b5 f9 7e db
    00000020> 70 42 ef 20 3d eb af f7 1e 22 21 81 45 f5 ca 38
    00000030> 53 40 db d0 f2 01 b1 da e8 a2 0b 1b 09 41 52 50
    00000040> 41 32 2e 4e 45 54 a3 11 30 0f a0 03 02 01 01 a1
    00000050> 08 30 06 1b 04 72 69 63 6b a4 0b 30 09 a0 03 02
    00000060> 01 ff a1 02 04 00 a5 1a 18 18 53 61 74 20 53 65
    00000070> 70 20 31 37 20 31 32 3a 31 36 3a 34 39 20 32 30
    00000080> 31 36 a6 1a 18 18 53 61 74 20 53 65 70 20 31 37
    00000090> 20 31 32 3a 31 36 3a 35 33 20 32 30 31 36 a7 1a
    000000a0> 18 18 53 61 74 20 53 65 70 20 31 37 20 32 32 3a
    000000b0> 31 36 3a 34 39 20 32 30 31 36 a8 1a 18 18 53 75
    000000c0> 6e 20 53 65 70 20 31 38 20 31 32 3a 31 36 3a 34
    000000d0> 37 20 32 30 31 36
    000000d6> ^D
    
    shell$ derdump /tmp/keydata.der
    
    [APPLICATION 3]: tag 0x63 ##211 @0 ^0, Application, Constructed
      SEQUENCE (OF): tag 0x30 ##208 @3 ^1, Universal, Constructed
        [0]: tag 0xa0 #4 @6 ^2, Contextual, Constructed
          BITSTRING: tag 0x03 #2 @8 ^3, Universal, Primitive
             00 00 == ".."
        [1]: tag 0xa1 #43 @12 ^2, Contextual, Constructed
          SEQUENCE (OF): tag 0x30 #41 @14 ^3, Universal, Constructed
            [0]: tag 0xa0 #3 @16 ^4, Contextual, Constructed
              INTEGER: tag 0x02 #1 @18 ^5, Universal, Primitive
                 12 == 18
            [1]: tag 0xa1 #34 @21 ^4, Contextual, Constructed
              OCTETSTRING: tag 0x04 #32 @23 ^5, Universal, Primitive
                 a6 d3 2b b5 f9 7e db 70 42 ef 20 3d eb af f7 1e 22 21 81 45 f5 ca 38 53 40 db d0 f2 01 b1 da e8 == "..+..~.pB. =...."!.E..8S@......."
        [2]: tag 0xa2 #11 @57 ^2, Contextual, Constructed
          GeneralString: tag 0x1b #9 @59 ^3, Universal, Primitive
             41 52 50 41 32 2e 4e 45 54 == "ARPA2.NET"
        [3]: tag 0xa3 #17 @70 ^2, Contextual, Constructed 
          SEQUENCE (OF): tag 0x30 #15 @72 ^3, Universal, Constructed 
            [0]: tag 0xa0 #3 @74 ^4, Contextual, Constructed
              INTEGER: tag 0x02 #1 @76 ^5, Universal, Primitive
                 01 == 1
            [1]: tag 0xa1 #8 @79 ^4, Contextual, Constructed
              SEQUENCE (OF): tag 0x30 #6 @81 ^5, Universal, Constructed
                GeneralString: tag 0x1b #4 @83 ^6, Universal, Primitive
                   72 69 63 6b == "rick"
        [4]: tag 0xa4 #11 @89 ^2, Contextual, Constructed
          SEQUENCE (OF): tag 0x30 #9 @91 ^3, Universal, Constructed
            [0]: tag 0xa0 #3 @93 ^4, Contextual, Constructed
              INTEGER: tag 0x02 #1 @95 ^5, Universal, Primitive
                 ff == 255
            [1]: tag 0xa1 #2 @98 ^4, Contextual, Constructed
              OCTETSTRING: tag 0x04 #0 @100 ^5, Universal, Primitive
        [5]: tag 0xa5 #26 @102 ^2, Contextual, Constructed
          GeneralizedTime: tag 0x18 #24 @104 ^3, Universal, Primitive  
             53 61 74 20 53 65 70 20 31 37 20 31 32 3a 31 36 3a 34 39 20 32 30 31 36 == "Sat Sep 17 12:16:49 2016"
        [6]: tag 0xa6 #26 @130 ^2, Contextual, Constructed
          GeneralizedTime: tag 0x18 #24 @132 ^3, Universal, Primitive  
             53 61 74 20 53 65 70 20 31 37 20 31 32 3a 31 36 3a 35 33 20 32 30 31 36 == "Sat Sep 17 12:16:53 2016"
        [7]: tag 0xa7 #26 @158 ^2, Contextual, Constructed
          GeneralizedTime: tag 0x18 #24 @160 ^3, Universal, Primitive  
             53 61 74 20 53 65 70 20 31 37 20 32 32 3a 31 36 3a 34 39 20 32 30 31 36 == "Sat Sep 17 22:16:49 2016"
        [8]: tag 0xa8 #26 @186 ^2, Contextual, Constructed
          GeneralizedTime: tag 0x18 #24 @188 ^3, Universal, Primitive
             53 75 6e 20 53 65 70 20 31 38 20 31 32 3a 31 36 3a 34 37 20 32 30 31 36 =
    = "Sun Sep 18 12:16:47 2016"

And you can dump the encrypted keydata, which conceals the key, with:

    shell$ hexin > /tmp/enckeydata.der
    
    00000000> 30 82 01 02 a0 03 02 01 12 a1 03 02 01 02 a2 81
    00000010> f5 04 81 f2 5a 4e af 7f 06 c6 31 91 db 9b 68 88
    00000020> 85 fe 0c e8 60 92 b7 8b 86 85 37 73 81 33 65 cc
    00000030> 37 b2 4a ff 28 bb 65 9f d2 49 f3 f2 1e d6 45 15
    00000040> a4 b5 cd 1b b1 c9 11 42 ee b3 c9 e3 88 04 5f a3
    00000050> b6 a6 8b 33 5e 39 19 4d 18 48 36 1e b8 71 30 52
    00000060> 8b 02 2c dc 41 d7 b1 95 1f c6 24 f3 47 e9 92 fd
    00000070> dd a6 d9 d1 08 1a c1 aa 26 1a 01 62 aa 66 8d 03
    00000080> 57 fa 84 8d 88 a4 e1 0a 94 3a 37 f4 a2 7b 96 90
    00000090> 04 df 89 1a ef 42 bb fb 60 7f d4 75 8c 88 16 8d
    000000a0> 10 42 aa 32 53 1e 1e 24 50 fe 53 d8 63 3a 98 92
    000000b0> a0 f8 48 ea b4 39 33 70 59 b1 e7 0b 79 ae d6 3b
    000000c0> 5d a2 3c d9 73 58 0c ca c0 55 86 5d 05 96 4f dd
    000000d0> e8 6f 4c eb 5f a9 54 15 eb da e2 28 e3 fa 27 b7
    000000e0> ee b3 d4 b2 7e f7 b0 7c b9 1f 1c af 2e 24 ae c3
    000000f0> d2 c4 3c 74 58 64 60 7b 54 3a 61 50 24 cb 9a 4f
    00000100> ee 2c aa 15 48 7e
    00000106> ^D
    
    shell$ derdump /tmp/enckeydata.der
    
    SEQUENCE (OF): tag 0x30 ###258 @0 ^0, Universal, Constructed
      [0]: tag 0xa0 #3 @4 ^1, Contextual, Constructed
        INTEGER: tag 0x02 #1 @6 ^2, Universal, Primitive
           12 == 18
      [1]: tag 0xa1 #3 @9 ^1, Contextual, Constructed
        INTEGER: tag 0x02 #1 @11 ^2, Universal, Primitive
           02 == 2
      [2]: tag 0xa2 ##245 @14 ^1, Contextual, Constructed
        OCTETSTRING: tag 0x04 ##242 @17 ^2, Universal, Primitive
           5a 4e af 7f 06 c6 31 91 db 9b 68 88 85 fe 0c e8 60 92 b7 8b 86 85 37 73 81 33 65 cc 37 b2 4a ff 28 bb 65 9f d2 49 f3 f2 1e d6 45 15 a4 b5 cd 1b b1 c9 11 42 ee b3 c9 e3 88 04 5f a3 b6 a6 8b 33 5e 39 19 4d 18 48 36 1e b8 71 30 52 8b 02 2c dc 41 d7 b1 95 1f c6 24 f3 47 e9 92 fd dd a6 d9 d1 08 1a c1 aa 26 1a 01 62 aa 66 8d 03 57 fa 84 8d 88 a4 e1 0a 94 3a 37 f4 a2 7b 96 90 04 df 89 1a ef 42 bb fb 60 7f d4 75 8c 88 16 8d 10 42 aa 32 53 1e 1e 24 50 fe 53 d8 63 3a 98 92 a0 f8 48 ea b4 39 33 70 59 b1 e7 0b 79 ae d6 3b 5d a2 3c d9 73 58 0c ca c0 55 86 5d 05 96 4f dd e8 6f 4c eb 5f a9 54 15 eb da e2 28 e3 fa 27 b7 ee b3 d4 b2 7e f7 b0 7c b9 1f 1c af 2e 24 ae c3 d2 c4 3c 74 58 64 60 7b 54 3a 61 50 24 cb 9a 4f ee 2c aa 15 48 7e == "ZN....1...h.....`.....7s.3e.7.J.(.e..I....E........B......_....3^9.M.H6..q0R..,.A.....$.G...........&..b.f..W........:7..{.......B..`..u.....B.2S..$P.S.c:....H..93pY...y..;].<.sX...U.]..O..oL._.T....(..'.....~..|.....$....<tXd`{T:aP$..O.,..H~"

Note how this dump follows the ASN.1 specs, thanks to the Quick DER library:

   EncTicketPart   ::= [APPLICATION 3] SEQUENCE {
           flags                   [0] TicketFlags,
           key                     [1] EncryptionKey,
           crealm                  [2] Realm,
           cname                   [3] PrincipalName,
           transited               [4] TransitedEncoding,
           authtime                [5] KerberosTime,
           starttime               [6] KerberosTime OPTIONAL,
           endtime                 [7] KerberosTime,
           renew-till              [8] KerberosTime OPTIONAL,
           caddr                   [9] HostAddresses OPTIONAL,
           authorization-data      [10] AuthorizationData OPTIONAL
   }

   EncryptedData   ::= SEQUENCE {
           etype   [0] Int32 -- EncryptionType --,
           kvno    [1] UInt32 OPTIONAL,
           cipher  [2] OCTET STRING -- ciphertext
   }

There is no authorization-data in the ticket cache, so it is absent; there may
be client address data (caddr) in the Ticket, not shown in this dump but it
has been shown to work.  Not sure if it's useful if your purpose is to carry
your Kerberos ticket in an NFC Tag to your mobile platform, though.

